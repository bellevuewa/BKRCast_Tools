import pandas as pd
import h5py
import numpy as np
import random 
import os
import utility

'''
This program is to generate total households and persons by census blockgroups from PSRC's regional synthetic population, replace
the Bellevue portion with local estimate from PCD, and merge them with the PopulationSim's control file. Local estimate from PCD are housing
units. Use occupancy rate factors (for SF and MF) to convert housing units to households. Local estimate does not include population. So an average-per-unit (calculated from 2016
ACS 5-year estimate) is used to estimate population. The new control file will be used by PopulationSim to generate synthetic population that matches PSRC's 
control total.

Three files will be generated by this program.
PSRC's control total, merged control file, and an error file with missing values in any blockgroup.
'''

########### configuration #########################
output_dir = r'D:\PopulationSim\PSRCrun0423\output'   
# synthetic population from PSRC
synthetic_pop_file = r'D:\2035BKRCastBaseline\2035BKRCastBaseline\inputs\hh_and_persons.h5'
# parcel file, parcelid and blockgroup id must be included
parcel_bg_File_Name = r"I:\Modeling and Analysis Group\07_ModelDevelopment&Upgrade\NextgenerationModel\BasicData\2014_parcels.csv"
# base year control file, from census_getter.
acs_existing_control_file_name = r'D:\PopulationSim\PSRCrun0423\data\acecon0403.csv'
acs_future_control_file_name = 'acecon0403-2035PSRC_control_total.csv'
new_local_estimated_file_name = r'I:\Modeling and Analysis Group\07_ModelDevelopment&Upgrade\NextgenerationModel\2035SyntheticPop_from_PopSim\2035BellevueHHsEstimates.csv'
sf_occupancy_rate = 0.952  # from Gwen
mf_occupancy_rate = 0.895  # from G
avg_persons_per_sfhh =  2.82 # from 2016 ACS estimate
avg_persons_per_mfhh =  2.03 # from 2016 ACS estimate
# output hh and persons file- don't overwrite existing one!
future_control_file = '2035PSRC_hhs_by_bg.csv'
################### End of configuration

print 'Loading hh and person file...'
hdf_file = h5py.File(synthetic_pop_file, "r")
parcel_df = pd.read_csv(parcel_bg_File_Name, sep = ",", low_memory = False)
person_df = utility.h5_to_df(hdf_file, 'Person')
hh_df = utility.h5_to_df(hdf_file, 'Household')

new_local_estimate_df = pd.read_csv(new_local_estimated_file_name, sep = ',')
new_local_estimate_df['SF'] = new_local_estimate_df['SFUnits'] * sf_occupancy_rate
new_local_estimate_df['MF'] = new_local_estimate_df['MFUnits'] * mf_occupancy_rate
new_local_estimate_df['Tot_New_hhs'] = new_local_estimate_df['SF'] + new_local_estimate_df['MF']
new_local_estimate_df['Tot_New_Persons'] =  new_local_estimate_df['SF'] * avg_persons_per_sfhh + new_local_estimate_df['MF'] * avg_persons_per_mfhh
# Some parcels may have same PSRC_ID but different PINs. Stacked parcels. So need to groupby PSRC_ID first.
new_local_estimate_df = new_local_estimate_df.groupby('PSRC_ID')['SF', 'MF', 'SFUnits', 'MFUnits', 'Tot_New_hhs', 'Tot_New_Persons'].sum()
new_local_estimate_df.reset_index(inplace = True)

# PSRC's estimate
hh_df['total_persons'] = hh_df['hhexpfac'] * hh_df['hhsize']
hh_df['total_hhs'] = hh_df['hhexpfac']
print "2035 PSRC's synthetic population: "
print 'Total households: %d' % hh_df['total_hhs'].sum()
print 'Total persons: %d' % hh_df['total_persons'].sum()

hhs_by_parcels_df = hh_df.groupby('hhparcel')['total_hhs', 'total_persons'].sum()
hhs_by_parcels_df.reset_index(inplace = True)
hhs_by_parcels_df = parcel_df[['PSRC_ID', 'GEOID10']].merge(hhs_by_parcels_df, how = 'left', left_on = 'PSRC_ID', right_on = 'hhparcel')

# get parcels within local jurisdiction
selected_parcels_df = hhs_by_parcels_df.merge(new_local_estimate_df, how = 'right', left_on = 'PSRC_ID', right_on = 'PSRC_ID')
selected_parcels_df['hhparcel'] = selected_parcels_df['PSRC_ID']

print '2035 PSRC estimate by blockgroups in City of Bellevue: '
print 'Total households: %d' % selected_parcels_df['total_hhs'].sum()
print 'Total persons: %d' % selected_parcels_df['total_persons'].sum()

# update with local estimate
selected_parcels_df['total_hhs'] = selected_parcels_df['Tot_New_hhs']
selected_parcels_df['total_persons'] = selected_parcels_df['Tot_New_Persons']
selected_parcels_df.drop(new_local_estimate_df.columns, axis = 1, inplace = True)

print '2035 local estimate by blockgroups in City of Bellevue: '
print 'Total households: %d' % selected_parcels_df['total_hhs'].sum()
print 'Total persons: %d' % selected_parcels_df['total_persons'].sum()

updated_parcel_hhs = hhs_by_parcels_df.loc[~hhs_by_parcels_df['PSRC_ID'].isin(selected_parcels_df['hhparcel'])]
updated_parcel_hhs = updated_parcel_hhs.append(selected_parcels_df)

print '2035 final control total: '
print 'Total households: %d' % updated_parcel_hhs['total_hhs'].sum()
print 'Total persons: %d' % updated_parcel_hhs['total_persons'].sum()


hhs_by_bkgp = updated_parcel_hhs.groupby('GEOID10')['total_persons', 'total_hhs'].sum()
hhs_by_bkgp = hhs_by_bkgp.fillna(0)
hhs_by_bkgp['total_hhs'] = hhs_by_bkgp['total_hhs'].astype(int)
hhs_by_bkgp['total_persons'] = hhs_by_bkgp['total_persons'].astype(int)
hhs_by_bkgp.reset_index(inplace = True)

# update ACS control files with new estimate of households and population.
acs_control_df = pd.read_csv(acs_existing_control_file_name, sep = ',')
updated_acs_control_df = acs_control_df.merge(hhs_by_bkgp, how = 'left', left_on = 'block_group_id', right_on = 'GEOID10')
updated_acs_control_df['hh_bg_weight'] = updated_acs_control_df['total_hhs']
updated_acs_control_df['hh_tract_weight'] = updated_acs_control_df['total_hhs']
updated_acs_control_df['pers_bg_weight'] = updated_acs_control_df['total_persons']
updated_acs_control_df['pers_tract_weight'] = updated_acs_control_df['total_persons']
updated_acs_control_df.drop(hhs_by_bkgp.columns, axis = 1, inplace = True)

# if data is missing, export them to error file for further investigation.
at_issues_df = updated_acs_control_df[updated_acs_control_df['hh_bg_weight'].isnull()]
if at_issues_df.shape[0] > 0:
    print 'Some control total values are missing. See the error file. Missing values were treated as zeros.'
    at_issues_df.to_csv(os.path.join(output_dir, 'blockgroups_with_errors.csv'), sep = ',')
# treat all missing data as zeros
updated_acs_control_df.fillna(0, inplace = True)
updated_acs_control_df.to_csv(os.path.join(output_dir, acs_future_control_file_name), sep = ',')
hhs_by_bkgp.to_csv(os.path.join(output_dir, future_control_file), sep = ',')

print 'Done.'


